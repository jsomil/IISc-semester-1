

				Assignment#1
			DS 288 (AUG) 3:0 Numerical Methods

Somil Jain
CDS(M.Tech)
16071

QUESTION 1 : Bessel function :

Exact:
	X=1		      X=5		  X=50
   0.765197000000000  -0.177596000000000   0.055812300000000
   0.440050000000000  -0.327579000000000  -0.097511800000000
   0.114903484930000   0.046565116278000  -0.059712800794000
   0.019563353983000   0.364831230610000   0.092734804062000
   0.002476638964100   0.391232360460000   0.070840977282000
   0.000249757730210   0.261140546120000  -0.081400247697000
   0.000020938338002   0.131048731780000  -0.087121026821000
   0.000001502325817   0.053376410150000   0.060491201260000
   0.000000094223442   0.018405216655000   0.104058563170000
   0.000000005249250   0.005520280000000  -0.027192400000000
   0.000000000263061   0.001467800000000  -0.113847000000000

A) Recursion in Forward Direction

J2(approximated) =

   0.765197686560000  -0.177596771310000   0.055812327669000
   0.440050585740000  -0.327579137590000  -0.097511828125000
   0.114903484920000   0.046565116274000  -0.059712800794000
   0.019563353940000   0.364831230609200   0.092734804061480
   0.002476638720000   0.391232360457040   0.070840977281378
   0.000249755820004   0.261140546122064  -0.081400247696460
   0.000020919480037   0.131048731787088  -0.087121026820670
   0.000001277940440   0.053376410166947   0.060491201259499
  -0.000003028313870   0.018405216680364   0.104058563173329
  -0.000049730962368   0.005520283210218  -0.027192461044034
  -0.000892129008746   0.001467802876420  -0.113847849149181


absolute_error =

   1.0e-03 *

                   0                   0                   0
                   0                   0                   0
   0.000000009999973   0.000000003999995                   0
   0.000000042999916   0.000000000799971   0.000000000520001
   0.000000244099521   0.000000002959966   0.000000000622405
   0.000001910206250   0.000000002064016   0.000000000540401
   0.000018857964982   0.000000007087969   0.000000000330472
   0.000224385376931   0.000000016947166   0.000000000501092
   0.003122537312172   0.000000025364072   0.000000003329212
   0.049736211617780   0.000000071717872   0.000000000033563
   0.892129271807869   0.000000229120267   0.000000000818692


relative_error =

   1.0e+06 *

                   0                   0                   0
                   0                   0                   0
   0.000000000000000   0.000000000000000                   0
   0.000000000000002   0.000000000000000   0.000000000000000
   0.000000000000099   0.000000000000000   0.000000000000000
   0.000000000007648   0.000000000000000   0.000000000000000
   0.000000000900643   0.000000000000000   0.000000000000000
   0.000000149358664   0.000000000000000   0.000000000000000
   0.000033139707646   0.000000000000001   0.000000000000000
   0.009474917352620   0.000000000000013   0.000000000000000
   3.391333318851582   0.000000000000156   0.000000000000000



B) Recursion in Backward Direction

J2(approximated) =

   0.765197686556220  -0.177596771280249   0.055812327669596
   0.440050585743929  -0.327579137528596  -0.097511828125575
   0.114903484931638   0.046565116268811  -0.059712800794619
   0.019563353982624   0.364831230543645   0.092734804062005
   0.002476638964104   0.391232360383562   0.070840977282060
   0.000249757730211   0.261140546070055  -0.081400247696876
   0.000020938338002   0.131048731756548  -0.087121026821435
   0.000001502325817   0.053376410145660   0.060491201259731
   0.000000094223442   0.018405216651300   0.104058563174160
   0.000000005249250   0.005520283138500  -0.027192461044000
   0.000000000263062   0.001467802647300  -0.113847849150000


absolute_error =

   1.0e-10 *

   0.037797542873363   0.297505631241535   0.005964950755555
   0.039292458176021   0.614043260682706   0.005748179709997
   0.016382589729247   0.091888441300370   0.006194905699530
   0.003762407052577   0.663553656465865   0.000052596815792
   0.000043029815822   0.764375784889637   0.000601185767835
   0.000006644533014   0.499447705415434   0.001243449787580
   0.000003414898030   0.234519903496988   0.004352629368043
   0.000000333800861   0.043399936422439   0.002688058109435
   0.000000001699889   0.037000021102518   0.041599917954827
                   0                   0                   0
                   0                   0                   0


relative_error =

   1.0e-09 *

   0.004939578822211   0.167517477399536   0.010687514756472
   0.008929077576376   0.187448829983565   0.005894853804431
   0.014257696134480   0.197333215602390   0.010374501978063
   0.019231912154971   0.181879620162013   0.000056717449639
   0.001737427878885   0.195376421314153   0.000848641267951
   0.002660391335432   0.191256284340436   0.001527574943271
   0.016309307977664   0.178956255670365   0.004996072161759
   0.022218939298669   0.081309208132348   0.004443717521629
   0.001804104387276   0.201030076396663   0.039977409535114
                   0                   0                   0
                   0                   0                   0

#Is the last value computed by the recurrence relation is having less or more error compared to the forward approach?
ANSWER : No, forward approach having more error in both the cases (absolute and relative error).




QUESTION 2 : Using Newton’s method, Secant method, and Modified Newton’s method :

A) f(x)=x*sin(x) + 3*cos(x)-x 

CALL :

disp("Newton's Method for x*sin(x) + 3*cos(x)-x :::");
[root,tot_iter]= newton_method(-5)
[root,tot_iter]= newton_method(-3)
[root,tot_iter]= newton_method(1)

disp("Modify Newton's Method for x*sin(x) + 3*cos(x)-x :::");
[root,tot_iter]= modify_newton2(-5)
[root,tot_iter]= modify_newton2(-3)
[root,tot_iter]= modify_newton2(1)


disp("Secant Method for x*sin(x) + 3*cos(x)-x :::");

[root,tot_iter]= secant_method(-5,-4)
[root,tot_iter]= secant_method(-3,-1)
[root,tot_iter]= secant_method(1,3)


OUTPUT :

Newton's Method for x*sin(x) + 3*cos(x)-x :::

root =  -4.7124
tot_iter =  11


root = -3.2088
tot_iter =5


root =  1.5708
tot_iter = 10

Modify Newton's Method for x*sin(x) + 3*cos(x)-x :::

root = -7.0682
tot_iter = 8


root = -2.8523
tot_iter = 3


root = 0
tot_iter =5


Secant Method for x*sin(x) + 3*cos(x)-x :::

root = -4.7124
tot_iter = 8


root = -3.2088
tot_iter = 6


root = 1.5708
tot_iter = 6



B) f(x) = sin(x) - 0.1*x


CALL :

disp(" Newton's Method for sin(x) - 0.1*x :::");

[root,tot_iter]= newton_method2(3)
[root,tot_iter]= newton_method2(7)
[root,tot_iter]= newton_method2(8)

disp("Modify Newton's Method for sin(x) - 0.1*x :::");

[root,tot_iter]= modify_newton2(3)
[root,tot_iter]= modify_newton2(7)
[root,tot_iter]= modify_newton2(8)


disp("Secant Method for sin(x) - 0.1*x :::");


[root,tot_iter]= secant_method2(3,4)
[root,tot_iter]= secant_method2(7,8)
[root,tot_iter]= secant_method2(8,9)

OUTPUT :

Newton's Method for sin(x) - 0.1*x :::

root = 2.8523
tot_iter =  3


root = 7.0682
tot_iter = 4


root = 8.4232
tot_iter = 6


Modify Newton's Method for sin(x) - 0.1*x :::

root = 2.8523
tot_iter = 3


root = 7.0682
tot_iter = 4


root = 8.4232
tot_iter = 6


Secant Method for sin(x) - 0.1*x :::

root = 2.8523
tot_iter = 4


root = 7.0682
tot_iter = 7


root = 8.4232
tot_iter = 6


#observed convergence rates in these cases :

Ans : In Case A Modified Newton's method converges faster than newton's  and secant method.
      In case B Modified newton's and newton's converges at the same rate.
      Secant method convergence rate is slow.
      Result agrees with the analysis done in class. 	


QUESTION 3 : Cubic Newton’s Method :






QUESTION 4 : Newton’s method for the system :


root = [ x1 x2 ]' = [ 0.791167800382726 1.126737230197029 ]' 
tot_iter = 4




